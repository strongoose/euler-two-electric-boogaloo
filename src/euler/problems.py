from dataclasses import dataclass
from typing import Iterator, Iterable, Callable

from importlib import resources
from itertools import (
    chain,
    combinations_with_replacement,
    permutations,
    takewhile,
    count,
    combinations,
    islice,
)
from math import sqrt, floor
from typing_extensions import NamedTuple, TypeVar


def until(limit: int, it: Iterable[int]) -> Iterable[int]:
    return takewhile(
        lambda x: x < limit,
        it,
    )


def p1() -> int:
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    return sum([n for n in range(1, 1000) if n % 3 == 0 or n % 5 == 0])


def fibonacci() -> Iterator[int]:
    prev: int = 1
    yield prev
    curr: int = 1
    yield curr
    while True:
        curr, prev = curr + prev, curr
        yield curr


def p2() -> int:
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    return sum([n for n in until(4_000_000, fibonacci()) if n % 2 == 0])


def primes() -> Iterator[int]:
    primes = [2]
    yield 2

    def isprime(n: int) -> bool:
        # return all(map(lambda p: n % p != 0, primes))
        for p in primes:
            if n % p == 0:
                return False
        return True

    i = 3
    while True:
        if isprime(i):
            primes.append(i)
            yield i
        i += 2


def prime_factors(n: int) -> list[int]:
    dividend = n
    factors = []

    for p in takewhile(lambda x: x <= sqrt(dividend), primes()):
        while dividend % p == 0:
            dividend = dividend // p
            factors.append(p)

    # The remaining dividend is the last prime factor
    # This can be 1 sometimes - for example, finding the prime factors of 4
    if dividend != 1:
        factors.append(dividend)
    return factors


def p3() -> int:
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143?
    """
    return prime_factors(600851475143)[-1]


def is_palindrome(n: int) -> bool:
    word = str(n)

    while word != "":
        if word[0] != word[-1]:
            return False

        word = word[1:-1]

    return True


def p4() -> int:
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is

        9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    max = 0

    for a in range(1, 1000):
        for b in range(1, 1000):
            product = a * b
            if product > max and is_palindrome(product):
                max = a * b

    return max


def product(ns: Iterable[int]) -> int:
    res = 1
    for n in ns:
        res = res * n
    return res


def p5() -> int:
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

    # Notes:
        - My intuition was wrong with this one - initially I thought we could just take all the primes under 20 and
          multiply them... but if we do that the result won't divide by, e.g., 4 (== 2 * 2)
    """
    factors = []

    for p in until(20, primes()):
        # We add this prime factor n times, where n is the largest integer for which factor**n < 20
        # i.e., the floor of the nth root of 20
        repeats = floor(20 ** (1 / p))

        for _ in range(0, repeats):
            factors.append(p)

    return product(factors)


def p6() -> int:
    """
    The sum of the squares of the first ten natural numbers is,

        1^2 + 2^2 + ... + 10^2 = 385

    The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)^2 = 55^2 = 3025

    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
    3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the
    sum.
    """
    sum_of_squares = sum(n**2 for n in range(0, 101))
    square_of_sum = sum(range(0, 101)) ** 2

    return square_of_sum - sum_of_squares


def p7() -> int:
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10001st prime number?
    """
    return [*islice(primes(), 10_001)][-1]


T = TypeVar("T")


def windows(input: Iterable[T], width: int) -> Iterator[list[T]]:
    iterator = iter(input)
    window: list[T] = []

    for i in range(0, width):
        window.append(next(iterator))
    yield window[:]

    for n in iterator:
        window.pop(0)
        window.append(n)
        yield window[:]


def p8() -> int:
    """
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """
    input = "".join(
        """
      73167176531330624919225119674426574742355349194934
      96983520312774506326239578318016984801869478851843
      85861560789112949495459501737958331952853208805511
      12540698747158523863050715693290963295227443043557
      66896648950445244523161731856403098711121722383113
      62229893423380308135336276614282806444486645238749
      30358907296290491560440772390713810515859307960866
      70172427121883998797908792274921901699720888093776
      65727333001053367881220235421809751254540594752243
      52584907711670556013604839586446706324415722155397
      53697817977846174064955149290862569321978468622482
      83972241375657056057490261407972968652414535100474
      82166370484403199890008895243450658541227588666881
      16427171479924442928230863465674813919123162824586
      17866458359124566529476545682848912883142607690042
      24219022671055626321111109370544217506941658960408
      07198403850962455444362981230987879927244284909188
      84580156166097919133875499200524063689912560717606
      05886116467109405077541002256983155200055935729725
      71636269561882670428252483600823257530420752963450
    """.split()
    )

    digits = [int(c) for c in input]

    max = 0
    for window in windows(digits, 13):
        if (x := product(window)) > max:
            max = x

    return max


def isqrt(n: int) -> int | None:
    def iterate(guess: float) -> float:
        return (guess + n / guess) / 2

    prev = n / 2
    guess = iterate(prev)

    while abs(guess - prev) >= 0.5:
        prev, guess = guess, iterate(guess)

    root = floor(guess)

    if root * root == n:
        return root
    else:
        return None


def pythagorean_triplets() -> Iterator[tuple[int, int, int]]:
    for a in range(1, 1000):
        for b in range(a, 1000):
            if c := isqrt(a**2 + b**2):
                yield (a, b, c)


def p9() -> int:
    """
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

        a^2 + b^2 = c^2

    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

    There exists exactly one Pythagorean triplet for which a + 6 + c = 1000.

    Find the product abc.
    """
    for a, b, c in pythagorean_triplets():
        if a + b + c == 1000:
            return a * b * c

    # Unreachable
    assert False


def sieve(n: int) -> list[int]:
    """
    There are two key optimisations in here that have made this problem tractable in less than a second or so
     - Instead of iterating through the sieve marking numbers as non-prime, use slice assignment. This is a _lot_ faster.
     - A much smaller optimisation which still helps a bit is only running over non-even numbers in the sieve range.
    """
    sieve = [True] * (n + 1)

    def sieve_for(n: int) -> None:
        start = n * 2
        products = len(sieve[start::n])
        sieve[start::n] = [False] * products

    limit = int(n**0.5) + 1
    sieve_for(2)
    for i in range(3, limit, 2):
        sieve_for(i)

    return [n for n, isprime in enumerate(sieve) if isprime and n > 1]


def p10() -> int:
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    """
    return sum(sieve(2_000_000))


def diagonals(arr: list[list[int]]) -> Iterator[list[int]]:
    """
       0 1                 1
       2 3 -> diagonals -> 0 3
       4 5                 2 5
                           4

                             2
       0 1 2                 1 5
       3 4 5 -> diagonals -> 0 4 8
       6 7 8                 3 7
                             6

    Number of diagonals = h + w - 1

    We read out the diagonals from top right to bottom left, as in the examples above.

    The function assumes that the array is a regular grid i.e. no uneven line lengths.
    """
    height = len(arr)
    width = len(arr[0])

    start_indices: list[tuple[int, int]] = [
        # Top row (y = 0) (in reverse order)
        *[(x, 0) for x in range(width - 1, -1, -1)],
        # Left column (x = 0) (excluding (0, 0), which is included in the top row)
        *[(0, y) for y in range(1, height)],
    ]

    diag = []
    for x, y in start_indices:
        while x < width and y < height:
            diag.append(arr[y][x])
            x, y = x + 1, y + 1
        yield diag
        diag = []


def transpose(arr: list[list[int]]) -> list[list[int]]:
    width = len(arr[0])
    return [[row[x] for row in arr] for x in range(0, width)]


def flip_y(arr: list[list[int]]) -> list[list[int]]:
    return arr[::-1]


def p11() -> int:
    """
    In the 20×20 grid below, four numbers along a diagonal line have been marked [with *].

        08  02  22  97  38  15  00  40  00  75  04  05  07  78  52  12  50  77  91  08
        49  49  99  40  17  81  18  57  60  87  17  40  98  43  69  48  04  56  62  00
        81  49  31  73  55  79  14  29  93  71  40  67  53  88  30  03  49  13  36  65
        52  70  95  23  04  60  11  42  69  24  68  56  01  32  56  71  37  02  36  91
        22  31  16  71  51  67  63  89  41  92  36  54  22  40  40  28  66  33  13  80
        24  47  32  60  99  03  45  02  44  75  33  53  78  36  84  20  35  17  12  50
        32  98  81  28  64  23  67  10 *26* 38  40  67  59  54  70  66  18  38  64  70
        67  26  20  68  02  62  12  20  95 *63* 94  39  63  08  40  91  66  49  94  21
        24  55  58  05  66  73  99  26  97  17 *78* 78  96  83  14  88  34  89  63  72
        21  36  23  09  75  00  76  44  20  45  35 *14* 00  61  33  97  34  31  33  95
        78  17  53  28  22  75  31  67  15  94  03  80  04  62  16  14  09  53  56  92
        16  39  05  42  96  35  31  47  55  58  88  24  00  17  54  24  36  29  85  57
        86  56  00  48  35  71  89  07  05  44  44  37  44  60  21  58  51  54  17  58
        19  80  81  68  05  94  47  69  28  73  92  13  86  52  17  77  04  89  55  40
        04  52  08  83  97  35  99  16  07  97  57  32  16  26  26  79  33  27  98  66
        88  36  68  87  57  62  20  72  03  46  33  67  46  55  12  32  63  93  53  69
        04  42  16  73  38  25  39  11  24  94  72  18  08  46  29  32  40  62  76  36
        20  69  36  41  72  30  23  88  34  62  99  69  82  67  59  85  74  04  36  16
        20  73  35  29  78  31  90  01  74  31  49  71  48  86  81  16  23  57  05  54
        01  70  54  71  83  51  54  69  16  92  33  48  61  43  52  01  89  19  67  48

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    """

    input = [
        [*map(int, line.split())]
        for line in """
        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    """.strip().split("\n")
    ]

    res = 0

    # Horizontal
    for line in input:
        for w in windows(line, 4):
            res = max(product(w), res)

    # Diagonal (down-right)
    for diag in diagonals(input):
        if len(diag) >= 4:
            for w in windows(diag, 4):
                res = max(product(w), res)

    # Transpose for verticals
    input = transpose(input)
    for line in input:
        for w in windows(line, 4):
            res = max(product(w), res)

    # Flip for up-left diags
    input = flip_y(input)
    for diag in diagonals(input):
        if len(diag) >= 4:
            for w in windows(diag, 4):
                res = max(product(w), res)

    return res


def triangle_numbers() -> Iterator[int]:
    tri = 0
    for i in count(start=1):
        tri += i
        yield tri


def p12() -> int:
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
    1+2+3+4+5+6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1:  1
        3:  1, 3
        6:  1, 2, 3, 6
        10: 1, 2, 5, 10
        15: 1, 3, 5, 15
        21: 1, 3, 7, 21
        28: 1, 2, 4, 7, 14, 28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    """
    for n in triangle_numbers():
        pfs = prime_factors(n)

        # An upper bound on the number of factors for a number with p prime factors is
        #  sum([p choose i] for i in range(1, p + 1))
        # This works out to be 2**p - 1 for reasons I don't entirely comprehend.
        #
        # Anyway this makes this problem run marginally faster

        upper_bound = 2 ** len(pfs) - 1
        if upper_bound < 500:
            continue

        # According to some random Maths StackExchange, if n = p1**v1 * p2**v2 * ... * pk**vk
        # then the number of factors of n is
        #   product([vi + 1] for vi in [v1, ..., vk])
        pfs_counts: dict[int, int] = {}
        for pf in pfs:
            if pf not in pfs_counts.keys():
                pfs_counts[pf] = 1
            else:
                pfs_counts[pf] += 1

        nfactors = product([v + 1 for v in pfs_counts.values()])

        if nfactors > 500:
            return n

    # Unreachable
    assert False


def bigsum(*ns: list[int]) -> list[int]:
    """
    Sum some big numbers. Each number should be provided as a list of single digits.
    """

    # Theoretically we should pad the ns with leading 0s to make them equal width. We have known input, so I'm not
    # going to bother.
    width = len(ns[0])

    digits = []
    carry = 0
    for i in range(width - 1, -1, -1):
        col_sum = sum(int(n[i]) for n in ns) + carry

        digits.append(str(col_sum % 10))
        carry = col_sum // 10

    digits = digits[::-1]
    digits = [*str(carry)] + digits

    return [*map(int, digits)]


def p13() -> int:
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

        [see code]
    """
    input = [
        [int(digit) for digit in row]
        for row in """
    37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676
    89261670696623633820136378418383684178734361726757
    28112879812849979408065481931592621691275889832738
    44274228917432520321923589422876796487670272189318
    47451445736001306439091167216856844588711603153276
    70386486105843025439939619828917593665686757934951
    62176457141856560629502157223196586755079324193331
    64906352462741904929101432445813822663347944758178
    92575867718337217661963751590579239728245598838407
    58203565325359399008402633568948830189458628227828
    80181199384826282014278194139940567587151170094390
    35398664372827112653829987240784473053190104293586
    86515506006295864861532075273371959191420517255829
    71693888707715466499115593487603532921714970056938
    54370070576826684624621495650076471787294438377604
    53282654108756828443191190634694037855217779295145
    36123272525000296071075082563815656710885258350721
    45876576172410976447339110607218265236877223636045
    17423706905851860660448207621209813287860733969412
    81142660418086830619328460811191061556940512689692
    51934325451728388641918047049293215058642563049483
    62467221648435076201727918039944693004732956340691
    15732444386908125794514089057706229429197107928209
    55037687525678773091862540744969844508330393682126
    18336384825330154686196124348767681297534375946515
    80386287592878490201521685554828717201219257766954
    78182833757993103614740356856449095527097864797581
    16726320100436897842553539920931837441497806860984
    48403098129077791799088218795327364475675590848030
    87086987551392711854517078544161852424320693150332
    59959406895756536782107074926966537676326235447210
    69793950679652694742597709739166693763042633987085
    41052684708299085211399427365734116182760315001271
    65378607361501080857009149939512557028198746004375
    35829035317434717326932123578154982629742552737307
    94953759765105305946966067683156574377167401875275
    88902802571733229619176668713819931811048770190271
    25267680276078003013678680992525463401061632866526
    36270218540497705585629946580636237993140746255962
    24074486908231174977792365466257246923322810917141
    91430288197103288597806669760892938638285025333403
    34413065578016127815921815005561868836468420090470
    23053081172816430487623791969842487255036638784583
    11487696932154902810424020138335124462181441773470
    63783299490636259666498587618221225225512486764533
    67720186971698544312419572409913959008952310058822
    95548255300263520781532296796249481641953868218774
    76085327132285723110424803456124867697064507995236
    37774242535411291684276865538926205024910326572967
    23701913275725675285653248258265463092207058596522
    29798860272258331913126375147341994889534765745501
    18495701454879288984856827726077713721403798879715
    38298203783031473527721580348144513491373226651381
    34829543829199918180278916522431027392251122869539
    40957953066405232632538044100059654939159879593635
    29746152185502371307642255121183693803580388584903
    41698116222072977186158236678424689157993532961922
    62467957194401269043877107275048102390895523597457
    23189706772547915061505504953922979530901129967519
    86188088225875314529584099251203829009407770775672
    11306739708304724483816533873502340845647058077308
    82959174767140363198008187129011875491310547126581
    97623331044818386269515456334926366572897563400500
    42846280183517070527831839425882145521227251250327
    55121603546981200581762165212827652751691296897789
    32238195734329339946437501907836945765883352399886
    75506164965184775180738168837861091527357929701337
    62177842752192623401942399639168044983993173312731
    32924185707147349566916674687634660915035914677504
    99518671430235219628894890102423325116913619626622
    73267460800591547471830798392868535206946944540724
    76841822524674417161514036427982273348055556214818
    97142617910342598647204516893989422179826088076852
    87783646182799346313767754307809363333018982642090
    10848802521674670883215120185883543223812876952786
    71329612474782464538636993009049310363619763878039
    62184073572399794223406235393808339651327408011116
    66627891981488087797941876876144230030984490851411
    60661826293682836764744779239180335110989069790714
    85786944089552990653640447425576083659976645795096
    66024396409905389607120198219976047599490197230297
    64913982680032973156037120041377903785566085089252
    16730939319872750275468906903707539413042652315011
    94809377245048795150954100921645863754710598436791
    78639167021187492431995700641917969777599028300699
    15368713711936614952811305876380278410754449733078
    40789923115535562561142322423255033685442488917353
    44889911501440648020369068063960672322193204149535
    41503128880339536053299340368006977710650566631954
    81234880673210146739058568557934581403627822703280
    82616570773948327592232845941706525094512325230608
    22918802058777319719839450180888072429661980811197
    77158542502016545090413245809786882778948721859617
    72107838435069186155435662884062257473692284509516
    20849603980134001723930671666823555245252804609722
    53503534226472524250874054075591789781264330331690
    """.split()
    ]

    first_ten = [str(digit) for digit in bigsum(*input)[:10]]

    return int("".join(first_ten))


def collatz(n: int) -> Iterator[int]:
    while True:
        yield n
        match n:
            case 1:
                return
            case n if n % 2 == 0:
                n = n // 2
            case n:
                n = 3 * n + 1


def p14() -> int:
    """
    The following iterative sequence is defined for the set of positive integers:

        n -> n/2 (n is even)
        n -> 3n + 1 (n is odd)

    Using the rule above and starting with 13, we generate the following sequence:

        13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1

    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been
    proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?

    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    result = 0
    longest = 0
    for i in range(1, 1_000_001):
        len_i = len([*collatz(i)])
        if len_i > longest:
            longest = len_i
            result = i

    return result


def factorial(n: int) -> int:
    return product(range(1, n + 1))


def p15() -> int:
    """
    Starting in the top left corner of a 2 x 2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.

        ╺━━━━━━━┓ ╺━━━┓───┐ ╺━━━┓───┐
        │   │   ┃ │   ┃   │ │   ┃   │
        ├───┼───┃ ├───┗━━━┓ ├───┃───┤
        │   │   ┃ │   │   ┃ │   ┃   │
        └───┴───▼ └───┴───▼ └───┗━━━▶
        ╻───┬───┐ ╻───┬───┐ ╻───┬───┐
        ┃   │   │ ┃   │   │ ┃   │   │
        ┗━━━┿━━━┓ ┗━━━┓───┤ ┃───┼───┤
        │   │   ┃ │   ┃   │ ┃   │   │
        └───┴───▼ └───┗━━━▶ ┗━━━━━━━▶

    How many such routes are there through a 20 × 20 grid?
    """

    return factorial(40) // factorial(20) // factorial(20)


def p16() -> int:
    """
    2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

    What is the sum of the digits of the number 2^1000?
    """
    n = 2**1000
    digits = [int(d) for d in str(n)]

    return sum(digits)


def number_word(n: int) -> str:
    if n < 1:
        return "too small!"

    match n:
        case 1:
            return "one"
        case 2:
            return "two"
        case 3:
            return "three"
        case 4:
            return "four"
        case 5:
            return "five"
        case 6:
            return "six"
        case 7:
            return "seven"
        case 8:
            return "eight"
        case 9:
            return "nine"
        case 10:
            return "ten"
        case 11:
            return "eleven"
        case 12:
            return "twelve"
        case 13:
            return "thirteen"
        case 14:
            return "fourteen"
        case 15:
            return "fifteen"
        case 16:
            return "sixteen"
        case 17:
            return "seventeen"
        case 18:
            return "eighteen"
        case 19:
            return "nineteen"
        case 20:
            return "twenty"
        case 30:
            return "thirty"
        case 40:
            return "forty"
        case 50:
            return "fifty"
        case 60:
            return "sixty"
        case 70:
            return "seventy"
        case 80:
            return "eighty"
        case 90:
            return "ninety"
        case 1000:
            return "one thousand"

        case n if n < 100:
            tens = number_word((n // 10) * 10)
            units = number_word(n % 10)
            return f"{tens} {units}"

        case n if n < 1_000:
            hundreds = number_word(n // 100)
            rem = n % 100
            if rem == 0:
                return f"{hundreds} hundred"
            else:
                rest = number_word(rem)
                return f"{hundreds} hundred and {rest}"

        case _:
            return "too big!"


def p17() -> int:
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19
    letters used in total.

    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be
    used?

    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115
    (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with
    British usage.
    """
    letters = 0
    for n in range(1, 1001):
        nword = number_word(n)
        letters += len("".join(nword.split()))

    return letters


def p18() -> int:
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total
    from top to bottom is 23.

           3
          7 4
         2 4 6
        8 5 9 3

    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom of the triangle below:

                                    75
                                  95  64
                                17  47  82
                              18  35  87  10
                            20  04  82  47  65
                          19  01  23  75  03  34
                        88  02  77  73  07  63  67
                      99  65  04  28  06  16  70  92
                    41  41  26  56  83  40  80  70  33
                  41  48  72  33  47  32  37  16  94  29
                53  71  44  65  25  43  91  52  97  51  14
              70  11  33  28  77  73  17  78  39  68  17  57
            91  71  52  38  17  14  91  43  58  50  27  29  48
          63  66  04  68  89  53  67  30  73  16  69  87  40  31
        04  62  98  27  23  09  70  98  73  93  38  53  60  04  23

    NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem
    67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and
    requires a clever method! ;o)
    """
    input = """
                                    75
                                  95  64
                                17  47  82
                              18  35  87  10
                            20  04  82  47  65
                          19  01  23  75  03  34
                        88  02  77  73  07  63  67
                      99  65  04  28  06  16  70  92
                    41  41  26  56  83  40  80  70  33
                  41  48  72  33  47  32  37  16  94  29
                53  71  44  65  25  43  91  52  97  51  14
              70  11  33  28  77  73  17  78  39  68  17  57
            91  71  52  38  17  14  91  43  58  50  27  29  48
          63  66  04  68  89  53  67  30  73  16  69  87  40  31
        04  62  98  27  23  09  70  98  73  93  38  53  60  04  23
    """

    triangle = [[int(n) for n in line.split()] for line in input.strip().split("\n")]

    """
    Encoding routes:

        The 0 route is straight down the left side of the triangle.
        A route can then be encoded as a binary value in [0, 2**14)
        For each binary digit, if 0 go left, if 1 go right.
    """

    directions: list[list[int]] = [[*map(int, f"{n:014b}")] for n in range(0, 2**14)]
    route_sums = []

    for dir in directions:
        x, y = 0, 0
        this_route_sum = triangle[y][x]
        for step in dir:
            x += step
            y += 1
            this_route_sum += triangle[y][x]
        route_sums.append(this_route_sum)

    return max(*route_sums)


def is_leap_year(year: int) -> bool:
    return year % 400 == 0 or year % 4 == 0 and year % 100 != 0


def p19() -> int:
    """
    You are given the following information, but you may prefer to do some research for yourself.

     * 1 Jan 1900 was a Monday.
     * Thirty days has September,
       April, June and November.
       All the rest have thirty-one,
       Saving February alone,
       Which has twenty-eight, rain or shine.
       And on leap years, twenty-nine.
     * A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.

    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    """

    @dataclass
    class Month:
        year: int
        month: int
        start_day: int

        @property
        def duration(self) -> int:
            match self.month:
                case 1:
                    if is_leap_year(self.year):
                        return 29
                    else:
                        return 28

                case 3 | 5 | 8 | 10:
                    return 30

                case _:
                    return 31

    all_months = [
        Month(year, month, -1) for year in range(1900, 2001) for month in range(0, 12)
    ]

    # 0 index start days, starting with Sunday (just this once)
    all_months[0].start_day = 1

    for prev, cur in windows(all_months, 2):
        cur.start_day = (prev.start_day + prev.duration) % 7

    return len([month for month in all_months[12:] if month.start_day == 0])


def p20() -> int:
    """
    n! means n × (n − 1) × ... × 3 × 2 × 1

    For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

    Find the sum of the digits in the number 100!
    """
    return sum(int(d) for d in str(factorial(100)))


def uniq(seq: Iterable[T]) -> Iterable[T]:
    it = iter(seq)
    prev = next(it)
    yield prev
    for cur in it:
        if cur == prev:
            continue
        else:
            yield cur
            prev = cur


def factors(n: int) -> set[int]:
    """
    see https://docs.python.org/3/library/itertools.html#itertools-recipes
    """
    pfs = prime_factors(n)

    return set(
        product(factors)
        for factors in chain.from_iterable(
            combinations(pfs, i) for i in range(0, len(pfs) + 1)
        )
    )


def proper_factors(n: int) -> set[int]:
    return factors(n) - {n}


def p21() -> int:
    """
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).

    If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair and each of a and b are amicable numbers.

    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
    The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

    Evaluate the sum of all the amicable numbers under 10000.

    # Notes:
     - https://stackoverflow.com/questions/68030993/generating-the-powerset-of-a-multiset
    """

    def d(n: int) -> int:
        return sum(proper_factors(n))

    amicable: set[int] = set()

    numbers = set(range(2, 10_001))
    while numbers:
        a = numbers.pop()
        b = d(a)

        if a != b and d(b) == a:
            amicable |= {a, b}

        numbers -= {b}

    return sum(amicable)


def p22() -> int:
    """
    Using names.txt, a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical
    order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in
    the list to obtain a name score.

    For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is
    the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

    What is the total of all the name scores in the file?
    """

    namefile = resources.files(__name__) / "names.txt"
    with namefile.open("r") as file:
        names = sorted([name.strip('"') for name in file.read().split(",")])

    def score(pos: int, name: str) -> int:
        letter_scores = {
            letter: count + 1
            for count, letter in enumerate("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        }
        return pos * sum(letter_scores[letter] for letter in name)

    return sum(score(i + 1, name) for i, name in enumerate(names))


def is_abundant(n: int) -> bool:
    return sum(proper_factors(n)) > n


def p23() -> int:
    """
    A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example,
    the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

    A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this
    sum exceeds n.

    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum
    of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can
    be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis
    even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is
    less than this limit.

    Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
    """

    abundant_numbers = {n for n in range(1, 28123) if is_abundant(n)}

    sums_of_abundant_numbers = {
        a + b for a, b in combinations_with_replacement(abundant_numbers, 2)
    }

    non_sums_of_abundant_numbers = set(range(1, 28123)) - sums_of_abundant_numbers

    return sum(non_sums_of_abundant_numbers)


def p24() -> int:
    """
    A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

        012   021   102   120   201   210

    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
    """

    # Conveniently, if you pass items into itertools.permutations in lexicographic order, it also spits out the permutations in order.
    ps = permutations("0123456789")
    next(islice(ps, 999_999, 999_999), None)

    millionth = int("".join(next(ps)))
    return millionth


def p25() -> int:
    """
    The Fibonacci sequence is defined by the recurrence relation:

        F_n = F_(n - 1) + F_(n - 2), where F_1 = 1 and F_2 = 2

    Hence the first 12 terms will be:

        F_1  = 1
        F_2  = 1
        F_3  = 2
        F_4  = 3
        F_5  = 5
        F_6  = 8
        F_7  = 13
        F_8  = 21
        F_9  = 34
        F_10 = 55
        F_11 = 89
        F_12 = 144

    The 12th term, F_12, is the first term to contain three digits.

    What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
    """

    answer = 0
    for i, n in enumerate(fibonacci()):
        if len(str(n)) >= 1_000:
            answer = i + 1
            break

    return answer


@dataclass
class Fraction:
    """
    A fraction's decimal representation consists of

        1. The whole part
        2. A finite part of non-cycling decimal digits
        3. An infinite part of cycling deciamal digits

    For a non-recurring decimal, the infinite part is [0].
    """

    numerator: int
    denominator: int

    @property
    def whole_part(self) -> int:
        return self.numerator // self.denominator

    @property
    def _fractional_parts(self) -> tuple[list[int], list[int]]:
        Step = NamedTuple(
            "Step",
            [
                ("quotient", int),
                ("remainder", int),
            ],
        )

        history: list[Step] = []

        remainder = self.numerator % self.denominator

        while True:
            next_step = Step(
                10 * remainder // self.denominator,
                10 * remainder % self.denominator,
            )

            remainder = next_step.remainder

            if next_step in history:
                idx = history.index(next_step)
                digits = [step.quotient for step in history]
                return digits[:idx], digits[idx:]

            history.append(next_step)

    @property
    def finite_part(self) -> list[int]:
        return self._fractional_parts[0]

    @property
    def infinite_part(self) -> list[int]:
        return self._fractional_parts[1]

    def __repr__(self) -> str:
        finite_part_string = "".join([str(digit) for digit in self.finite_part])
        infinite_part_string = "".join([str(digit) for digit in self.infinite_part])

        match self.finite_part, self.infinite_part:
            case [[], [0]]:
                return f"{self.whole_part}"
            case [[], _]:
                return f"{self.whole_part}.({infinite_part_string})"
            case _, [0]:
                return f"{self.whole_part}.{finite_part_string}"

        return f"{self.whole_part}.{finite_part_string}({infinite_part_string})"


def p26() -> int:
    best_denom = 1
    longest_cycle = 0
    for denom in range(2, 1000):
        cycle_length = len(Fraction(1, denom).infinite_part)
        if cycle_length > longest_cycle:
            best_denom = denom
            longest_cycle = cycle_length

    return best_denom


def is_prime(n: int) -> bool:
    return len(prime_factors(n)) == 1


def p27() -> int:
    """
    Euler discovered the remarkable quadratic formula:

        n^2 + n + 41

    It turns out that the formula will produce 40 primes for the consecutive integer values 0 ≤ n ≤ 39. However,
    when n = 40, 40^2 + 40 + 41 = 40*(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41^2 + 41 + 41 is
    clearly divisible by 41.

    The incredible formula n^2 - 79n + 1601 was discovered, which produces 80 primes for the consecutive values
    0 ≤ n ≤ 79. The product of the coefficients, -79 and 1601, is -126479.

    Considering quadratics of the form:

        n^2 + a*n + b, where |a| < 1000 and |b| ≤ 1000

    where n is the modulus/absolute value of n
    e.g. | 11 | = 11 and | -4 | = 4

    Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for
    consecutive values of n, starting with n = 0.
    """

    def quadratic(a: int, b: int) -> Callable[[int], int]:
        return lambda n: n**2 + a * n + b

    answer = 0
    most_primes = 0
    for a in range(-999, 1000):
        for b in range(-1000, 1001):

            fn = quadratic(a, b)
            n = 0
            r = fn(n)
            while is_prime(abs(r)):
                n += 1
                r = fn(n)
            if n > most_primes:
                answer = a * b
                most_primes = n

    return answer
